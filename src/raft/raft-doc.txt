package raft // import "raft"


CONSTANTS

const (
	FOLLOWER int32 = iota
	CANDIDATE
	LEADER
	DOWN
)
    Status -- this is a custom type that you can use to represent the current
    status of a Raft peer.


VARIABLES

var debugStart time.Time
var debugVerbosity atomic.Bool

FUNCTIONS

func Debug(topic logTopic, format string, a ...interface{})
func getVerbosity() int
    Retrieve the verbosity level from an environment variable

func initLog()

TYPES

type Entry struct {
	Term int64
	Cmd  int
}
    Entry struct represents a log entry in Raft.

type RaftInterface struct {
	RequestVote     func(term int64, candidateId int, lastLogIndex int, lastLogTerm int64) (int64, bool, remote.RemoteObjectError)
	AppendEntries   func(term int64, leaderId int, prevLogIndex int, prevLogTerm int64, entries []Entry, leaderCommit int64) (int64, int64, bool, remote.RemoteObjectError)
	GetCommittedCmd func(int) (int, remote.RemoteObjectError)
	GetStatus       func() (StatusReport, remote.RemoteObjectError)
	NewCommand      func(int) (StatusReport, remote.RemoteObjectError)
}
    RaftInterface -- this is the "service interface" that is implemented by
    each Raft peer using the remote library from Lab 1. it supports five remote
    methods that you must define and implement. these methods are described as
    follows:

     1. RequestVote -- this is one of the remote calls defined in the Raft
        paper, and it should be supported as such. you will need to include
        whatever argument types are needed per the Raft algorithm, and you can
        package the return values however you like, as long as the last return
        type is `remote.RemoteObjectError`, since that is required for the
        remote library use.

     2. AppendEntries -- this is one of the remote calls defined in the Raft
        paper, and it should be supported as such and defined in a similar
        manner to RequestVote above.

     3. GetCommittedCmd -- this is a remote call that is used by the Controller
        in the test code. it allows the Controller to check the value of a
        commmitted log entry at a given index. the type of the function is given
        below, and it must be implemented as given, otherwise the test code will
        not function correctly. more detail about this method is available later
        in this starter code file.

     4. GetStatus -- this is a remote call that is used by the Controller to
        collect status information about the Raft peer. the struct type that it
        returns is defined above, and it must be implemented as given, or the
        Controller and test code will not function correctly. more detail below.

     5. NewCommand -- this is a remote call that is used by the Controller
        to emulate submission of a new command value by a Raft client.
        upon receipt, it will initiate processing of the command and reply back
        to the Controller with a StatusReport struct as defined above. it must
        be implemented as given, or the test code will not function correctly.
        more detail below

type RaftPeer struct {
	// persistent state
	id          int
	currentTerm atomic.Int64
	log         []Entry
	// volatile state on all
	commitIndex atomic.Int64
	lastApplied atomic.Int64
	// volatile state on leader
	nextIndex  []int
	matchIndex []int
	// states
	service         *remote.Service
	status          int32
	peers           []*RaftInterface
	electionTimeout *time.Timer
	mu              *sync.RWMutex
}
    RaftPeer struct represents the local state of a single Raft peer.

func NewRaftPeer(port int, id int, num int) *RaftPeer
    NewRaftPeer creates a new instance of RaftPeer and returns a pointer
    to it. It initializes the initial state of the Raft peer, creates the
    remote.Service and remote.StubFactory components, but does not start the
    service.

    Parameters: - port: The service port number where this Raft peer will listen
    for incoming messages. - id: The ID (or index) of this Raft peer in the peer
    group, ranging from 0 to num-1. - num: The number of Raft peers in the peer
    group (num > id).

    Returns: - A pointer to the created RaftPeer.

func (rf *RaftPeer) Activate()
    Activate initiates the functionality of the Raft peer to allow it to
    interact with other peers. It starts the remote.Service interface to support
    remote calls from other Raft peers. This method should be called by the
    Controller to "wake up" the Raft peer and allow it to start interacting with
    other peers.

func (rf *RaftPeer) AppendEntries(term int64, leaderId int, prevLogIndex int, prevLogTerm int64, entries []Entry, leaderCommit int64) (int64, int64, bool, remote.RemoteObjectError)
    # AppendEntries -- as described in the Raft paper, called by other Raft peers

func (rf *RaftPeer) Deactivate()
    Deactivate performs the "inverse" operation to Activate, effectively "going
    to sleep" and stopping the remote.Service interface. When deactivated,
    a Raft peer should not make or receive any remote calls, and any execution
    of the Raft protocol should effectively pause. However, local state should
    be maintained.

func (rf *RaftPeer) GetCommittedCmd(commitIndex int) (int, remote.RemoteObjectError)
    GetCommittedCmd -- called (only) by the Controller. this method provides
    an input argument `index`. if the Raft peer has a log entry at the given
    `index`, and that log entry has been committed (per the Raft algorithm),
    then the command stored in the log entry should be returned to the
    Controller. otherwise, the Raft peer should return the value 0, which is not
    a valid command number and indicates that no committed log entry exists at
    that index

func (rf *RaftPeer) GetStatus() (StatusReport, remote.RemoteObjectError)
    GetStatus -- called (only) by the Controller. this method takes no
    arguments and is essentially a "getter" for the state of the Raft peer,
    including the Raft peer's current term, current last log index, role in the
    Raft algorithm, and total number of remote calls handled since starting. the
    method returns a `StatusReport` struct as defined at the top of this file.

func (rf *RaftPeer) LeaderThread()
    LeaderThread is a goroutine that runs when the RaftPeer is in the leader
    state. It stops the follower timer, sets a timeout between 150-300ms,
    and repeatedly sends AppendEntries RPCs to all other peers in the cluster.
    It resets the timer after each timeout and continues until the RaftPeer's
    status changes from leader. Finally, it stops the timer and logs a message
    indicating that the leader thread has stopped.

func (rf *RaftPeer) NewCommand(cmd int) (StatusReport, remote.RemoteObjectError)
    NewCommand -- called (only) by the Controller. this method emulates
    submission of a new command by a Raft client to this Raft peer, which should
    be handled and processed according to the rules of the Raft algorithm.
    once handled, the Raft peer should return a `StatusReport` struct with the
    updated status after the new command was handled. service implementation for
    RaftInterface

func (rf *RaftPeer) RequestVote(term int64, candidateId int, lastLogIndex int, lastLogTerm int64) (int64, bool, remote.RemoteObjectError)
    # RequestVote -- as described in the Raft paper, called by other Raft peers

func (rf *RaftPeer) ResetElectionTimeout()
    ResetElectionTimeout resets the election timer for the Raft peer.
    It generates a random timeout value between 500 and 600 milliseconds, and if
    the peer is not the leader, it resets the election timeout to the generated
    value. This method is called to prevent the peer from triggering an election
    prematurely.

func (rf *RaftPeer) getLastLogTermFirstIdx() int64
    getLastLogTermFirstIdx returns the index of the first log entry with the
    last log term. It searches the log entries in reverse order and returns
    the index of the first entry with a different term than the last log term.
    If no such entry is found, it returns 0.

func (rf *RaftPeer) sendAppendEntries()
    sendAppendEntries sends append entries RPCs to all peers in parallel.
    It retrieves the necessary information from the RaftPeer struct and uses
    it to construct the RPC request. The function updates the nextIndex and
    matchIndex for each peer based on the response received. It also updates the
    commitIndex if necessary.

func (rf *RaftPeer) startElection()
    startElection is called by a Raft peer to initiate an election. It resets
    the election timer, becomes a candidate, and sends requestVote RPCs to all
    other peers. If the peer receives a majority of votes, it becomes the leader
    and starts the leader thread.

type StatusReport struct {
	Index     int
	Term      int
	Leader    bool
	CallCount int
}
    StatusReport struct sent from Raft node to Controller in response to command
    and status requests. this is needed by the Controller, so do not change it.
    make sure you give it to the Controller when requested

type logTopic string

const (
	dClient  logTopic = "CLNT"
	dCommit  logTopic = "CMIT"
	dDrop    logTopic = "DROP"
	dError   logTopic = "ERRO"
	dInfo    logTopic = "INFO"
	dLeader  logTopic = "LEAD"
	dLog     logTopic = "LOG1"
	dLog2    logTopic = "LOG2"
	dPersist logTopic = "PERS"
	dSnap    logTopic = "SNAP"
	dTerm    logTopic = "TERM"
	dTimer   logTopic = "TIMR"
	dTrace   logTopic = "TRCE"
	dVote    logTopic = "VOTE"
	dWarn    logTopic = "WARN"
)
