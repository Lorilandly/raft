package raft // import "raft"


CONSTANTS

const (
	FOLLOWER int32 = iota
	CANDIDATE
	LEADER
	DOWN
)
    Status -- this is a custom type that you can use to represent the current
    status of a Raft peer.


VARIABLES

var debugStart time.Time
var debugVerbosity atomic.Bool

FUNCTIONS

func Debug(topic logTopic, format string, a ...interface{})
func getVerbosity() int
    Retrieve the verbosity level from an environment variable

func initLog()

TYPES

type Entry struct {
	Term uint64
	Cmd  int
}

type RaftInterface struct {
	RequestVote     func(term uint64, candidateId int, lastLogIndex int, lastLogTerm uint64) (uint64, bool, remote.RemoteObjectError)
	AppendEntries   func(term uint64, leaderId int, prevLogIndex int, prevLogTerm uint64, entries []Entry, leaderCommit uint64) (uint64, uint64, bool, remote.RemoteObjectError) // TODO: define function type
	GetCommittedCmd func(int) (int, remote.RemoteObjectError)
	GetStatus       func() (StatusReport, remote.RemoteObjectError)
	NewCommand      func(int) (StatusReport, remote.RemoteObjectError)
}
    RaftInterface -- this is the "service interface" that is implemented by
    each Raft peer using the remote library from Lab 1. it supports five remote
    methods that you must define and implement. these methods are described as
    follows:

     1. RequestVote -- this is one of the remote calls defined in the Raft
        paper, and it should be supported as such. you will need to include
        whatever argument types are needed per the Raft algorithm, and you can
        package the return values however you like, as long as the last return
        type is `remote.RemoteObjectError`, since that is required for the
        remote library use.

     2. AppendEntries -- this is one of the remote calls defined in the Raft
        paper, and it should be supported as such and defined in a similar
        manner to RequestVote above.

     3. GetCommittedCmd -- this is a remote call that is used by the Controller
        in the test code. it allows the Controller to check the value of a
        commmitted log entry at a given index. the type of the function is given
        below, and it must be implemented as given, otherwise the test code will
        not function correctly. more detail about this method is available later
        in this starter code file.

     4. GetStatus -- this is a remote call that is used by the Controller to
        collect status information about the Raft peer. the struct type that it
        returns is defined above, and it must be implemented as given, or the
        Controller and test code will not function correctly. more detail below.

     5. NewCommand -- this is a remote call that is used by the Controller
        to emulate submission of a new command value by a Raft client.
        upon receipt, it will initiate processing of the command and reply back
        to the Controller with a StatusReport struct as defined above. it must
        be implemented as given, or the test code will not function correctly.
        more detail below

type RaftPeer struct {
	// persistent state
	id           int
	currentTerm  atomic.Uint64
	firstTermIdx atomic.Uint64
	log          []Entry
	// volatile state on all
	commitIndex atomic.Uint64
	lastApplied atomic.Uint64
	// volatile state on leader
	nextIndex  []int
	matchIndex []int
	// states
	service         *remote.Service
	status          int32
	peers           []*RaftInterface
	electionTimeout *time.Timer
	mu              *sync.RWMutex
}
    you will need to define a struct that contains the parameters/variables that
    define and explain the current status of each Raft peer. it doesn't matter
    what you call this struct, and the test code doesn't really care what state
    it contains, so this part is up to you. TODO: define a struct to maintain
    the local state of a single Raft peer

func NewRaftPeer(port int, id int, num int) *RaftPeer
    `NewRaftPeer` -- this method should create an instance of the above struct
    and return a pointer to it back to the Controller, which calls this method.
    this allows the Controller to create, interact with, and control the
    configuration as needed. this method takes three parameters: -- port: this
    is the service port number where this Raft peer will listen for incoming
    messages -- id: this is the ID (or index) of this Raft peer in the peer
    group, ranging from 0 to num-1 -- num: this is the number of Raft peers in
    the peer group (num > id)

func (rf *RaftPeer) Activate()
    `Activate` -- this method operates on your Raft peer struct and initiates
    functionality to allow the Raft peer to interact with others. before the
    peer is activated, it can have internal algorithm state, but it cannot make
    remote calls using its stubs or receive remote calls using its underlying
    remote.Service interface. in essence, when not activated, the Raft peer is
    "sleeping" from the perspective of any other Raft peer.

    this method is used exclusively by the Controller whenever it needs to "wake
    up" the Raft peer and allow it to start interacting with other Raft peers.
    this is used to emulate connecting a new peer to the network or recovery of
    a previously failed peer.

    when this method is called, the Raft peer should do whatever is necessary
    to enable its remote.Service interface to support remote calls from other
    Raft peers as soon as the method returns (i.e., if it takes time for the
    remote.Service to start, this method should not return until that happens).
    the method should not otherwise block the Controller, so it may be useful to
    spawn go routines from this method to handle the on-going operation of the
    Raft peer until the remote.Service stops.

    given an instance `rf` of your Raft peer struct, the Controller will
    call this method as `rf.Activate()`, so you should define this method
    accordingly. NOTE: this is _not_ a remote call using the `remote.Service`
    interface of the Raft peer. it uses direct method calls from the Controller,
    and is used purely for the purposes of the test code. you should not be
    using this method for any messaging between Raft peers.

    TODO: implement the `Activate` method

func (rf *RaftPeer) AppendEntries(term uint64, leaderId int, prevLogIndex int, prevLogTerm uint64, entries []Entry, leaderCommit uint64) (uint64, uint64, bool, remote.RemoteObjectError)
    # AppendEntries -- as described in the Raft paper, called by other Raft peers

func (rf *RaftPeer) Deactivate()
    `Deactivate` -- this method performs the "inverse" operation to `Activate`,
    namely to emulate disconnection / failure of the Raft peer. when called,
    the Raft peer should effectively "go to sleep", meaning it should stop its
    underlying remote.Service interface, including shutting down the listening
    socket, causing any further remote calls to this Raft peer to fail due to
    connection error. when deactivated, a Raft peer should not make or receive
    any remote calls, and any execution of the Raft protocol should effectively
    pause. however, local state should be maintained, meaning if a Raft node was
    the LEADER when it was deactivated, it should still believe it is the leader
    when it reactivates.

    given an instance `rf` of your Raft peer struct, the Controller will
    call this method as `rf.Deactivate()`, so you should define this method
    accordingly. Similar notes / details apply here as with `Activate`

    TODO: implement the `Deactivate` method

func (rf *RaftPeer) GetCommittedCmd(commitIndex int) (int, remote.RemoteObjectError)
    GetCommittedCmd -- called (only) by the Controller. this method provides
    an input argument `index`. if the Raft peer has a log entry at the given
    `index`, and that log entry has been committed (per the Raft algorithm),
    then the command stored in the log entry should be returned to the
    Controller. otherwise, the Raft peer should return the value 0, which is not
    a valid command number and indicates that no committed log entry exists at
    that index

func (rf *RaftPeer) GetStatus() (StatusReport, remote.RemoteObjectError)
    GetStatus -- called (only) by the Controller. this method takes no
    arguments and is essentially a "getter" for the state of the Raft peer,
    including the Raft peer's current term, current last log index, role in the
    Raft algorithm, and total number of remote calls handled since starting. the
    method returns a `StatusReport` struct as defined at the top of this file.

func (rf *RaftPeer) LeaderThread()

func (rf *RaftPeer) NewCommand(cmd int) (StatusReport, remote.RemoteObjectError)
    NewCommand -- called (only) by the Controller. this method emulates
    submission of a new command by a Raft client to this Raft peer, which should
    be handled and processed according to the rules of the Raft algorithm.
    once handled, the Raft peer should return a `StatusReport` struct with the
    updated status after the new command was handled. service implementation for
    RaftInterface

func (rf *RaftPeer) RequestVote(term uint64, candidateId int, lastLogIndex int, lastLogTerm uint64) (uint64, bool, remote.RemoteObjectError)
    # RequestVote -- as described in the Raft paper, called by other Raft peers

func (rf *RaftPeer) ResetElectionTimeout()

func (rf *RaftPeer) sendAppendEntries()

func (rf *RaftPeer) startElection()

type StatusReport struct {
	Index     int
	Term      int
	Leader    bool
	CallCount int
}
    StatusReport struct sent from Raft node to Controller in response to command
    and status requests. this is needed by the Controller, so do not change it.
    make sure you give it to the Controller when requested

type logTopic string

const (
	dClient  logTopic = "CLNT"
	dCommit  logTopic = "CMIT"
	dDrop    logTopic = "DROP"
	dError   logTopic = "ERRO"
	dInfo    logTopic = "INFO"
	dLeader  logTopic = "LEAD"
	dLog     logTopic = "LOG1"
	dLog2    logTopic = "LOG2"
	dPersist logTopic = "PERS"
	dSnap    logTopic = "SNAP"
	dTerm    logTopic = "TERM"
	dTimer   logTopic = "TIMR"
	dTrace   logTopic = "TRCE"
	dVote    logTopic = "VOTE"
	dWarn    logTopic = "WARN"
)
